# Copyright 2025 OppositeNor
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
from typing import Any
from jinja2 import Environment, FileSystemLoader, select_autoescape
from build_script.utils import hash_file, hash_str_sha256
import build_setup
from pydantic import BaseModel, Field

GENERATE_PREFIX = "This file is generated by the White Bird Engine code generator."

class WBEGenFileInfo(BaseModel):
    """Information of a generated file.

    Attributes: 
        output_name: The name of the output file.
        template: The name of the template file.
        out_dir: The directory to output to.
        data: The data that's passed into the generation. If any attribute starts with a '.',
              the attribute will be replaced by the "attributes" parameter in the code generator.
              Available ones are:
              metadata: The metadata of the project files.
    """
    output_name : str = Field(default_factory=str)
    template : str = Field(default_factory=str)
    out_dir : str = Field(default_factory=str)
    data : dict[str, Any] = Field(default_factory=dict[str, Any])

class WBECodeGenerator:
    """The code generator."""
    def __init__(self, attributes, generate_infos):
        """Constructor.

        Args:
            attributes (): The attributes to replace the data starting with '.'.
            generate_infos (): The generation infos.
        """
        self._attributes = attributes
        # Create a template environment in the root_dir
        self._env = Environment(
            loader=FileSystemLoader(build_setup.template_dir),
            autoescape=select_autoescape(),
            trim_blocks=True,
            lstrip_blocks=True
        )
        self._generate_infos = generate_infos

    def generate(self):
        """Generate."""
        for generate_info in self._generate_infos:
            self._generate(generate_info)

    def _generate(self, generate_info):
        for key, value in generate_info.data.items():
            # If it starts with a '.', get the data from attributes.
            if value[0] == '.':
                generate_info.data[key] = self._attributes[key]
            if key[0] == '_':
                raise RuntimeError(f"Failed to generate file: {generate_info.output_name}. " +
                    f"Data: {key} starts with an underscore, which is preserved by the generator.")

        template = generate_info.template
        template = self._env.get_template(template)
        data = generate_info.data
        data["_prefix"] = GENERATE_PREFIX
        output = template.render(data)
        
        output_path = os.path.join(generate_info.out_dir, generate_info.output_name)
        if hash_file(output_path) != hash_str_sha256(output):
            # Only export when found different from what was generated to not trigger
            # the CMake compilation.
            with open(output_path, "w") as f:
                f.write(output)


