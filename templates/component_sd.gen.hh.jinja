// {{ _prefix }}
/* Copyright 2025 OppositeNor

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
#ifndef __WBE_COMPONENT_SD_GEN_HH__
#define __WBE_COMPONENT_SD_GEN_HH__

#include "core/serializer/serializer_json.hh"
{% for components_header in metadata.components_headers %}#include "{{ components_header }}"
{% endfor %}

namespace WhiteBirdEngine {

{% for component in metadata.components %}
/**
 * @class ComponentSD<{{ component.struct_name }}>
 * @brief Component serializer-deserializer for {{ component.struct_name }}.
 *
 * @tparam Serializer The type of the serializer.
 */
template <>
class ComponentSD<{{ component.struct_name }}> {
public:

    ~ComponentSD() {}
    ComponentSD(const ComponentSD&) = delete;
    ComponentSD(ComponentSD&&) = delete;
    ComponentSD& operator=(const ComponentSD&) = delete;
    ComponentSD& operator=(ComponentSD&&) = delete;

    using ComponentType = {{ component.struct_name }};

    /**
     * @brief Serialize a component.
     *
     * @param p_component The component to serialize.
     */
    template <typename Serializer>
    void serialize(Serializer& p_serializer, const ComponentType& p_component) {
        p_serializer.push_context("{{ component.struct_name }}");
        {% for field in component.fields %}p_serializer.register_serialize("{{ field.field_name }}", p_component.{{ field.field_name }});
        {% endfor %}
        p_serializer.pop_context();
    }

    /**
     * @brief Deserialize a component.
     *
     * @param p_component The component to deserialize.
     */
    template <typename ParserData>
    void deserialize(const ParserData& p_data, ComponentType& p_component) {
        {% for field in component.fields %}p_data.get_value("{{ field.field_name }}", p_component.{{ field.field_name }});
        {% endfor %}
    }
};
{% endfor %}

}

#endif
